import os

from libs import Global, Logger


def gather_source_files(root: str, dirpath='', allowed_file_postfix=None):
    if allowed_file_postfix is None:
        allowed_file_postfix = ('.h', '.hpp', '.cc', '.ccx', '.cpp', '.inc', '.c')
    files = []
    curr_path = os.path.join(root, dirpath)
    for item in os.listdir(curr_path):
        abspath = os.path.join(curr_path, item)
        relpath = os.path.join(dirpath, item)
        if os.path.isdir(abspath):
            files.extend(gather_source_files(root, relpath, allowed_file_postfix))
        elif os.path.isfile(abspath):
            if abspath.endswith(allowed_file_postfix):
                relpath_fixed = relpath.replace('\\', '/')
                files.append(relpath_fixed)
                Logger.verbose(f'\tGathered: {relpath_fixed}')
    return files


def generate_sourcefiles_cmake(path, file_groups, include_dir=None):
    with open(path, 'wt', encoding='utf-8') as f:
        f.write(
            '# Auto Generated Files -- Dont modify directly! -- Please run GenerateProjectFiles to update!\n')
        f.write(
            '# Generated by GenerateProjectFiles\n')
        f.write('#\n')
        if include_dir is not None:
            f.write(f'set(MODULE_INCLUDE_PATH "${{CMAKE_CURRENT_SOURCE_DIR}}/{include_dir}")\n')
        for key in file_groups:
            files = file_groups[key]
            files_txt = ' '.join(files)
            f.write(f'set(MODULE_{key.upper()}_FILES {files_txt})\n')
    pass


def gather_source():
    print(f'Gathering source files...')
    source_dir = os.path.join(Global.source_dir, 'Source')
    for item in os.listdir(source_dir):
        path = os.path.join(source_dir, item)
        if os.path.isdir(path) and os.path.isfile(os.path.join(path, 'CMakeLists.txt')):
            files = {}
            include_dir = None
            if os.path.isdir(os.path.join(path, 'Include')):
                include_dir = 'Include'
                include_files = gather_source_files(path, include_dir,
                                                    allowed_file_postfix=(
                                                        '.h', '.hpp', '.inc')
                                                    )
                files['Include'] = include_files
            if os.path.isdir(os.path.join(path, 'Source')):
                files['Source'] = gather_source_files(path, 'Source')
                generate_sourcefiles_cmake(os.path.join(path, 'SourceFiles.gen.cmake'), files, include_dir)
            else:
                files['Source'] = gather_source_files(path)
                generate_sourcefiles_cmake(os.path.join(path, 'SourceFiles.gen.cmake'), files, include_dir)
