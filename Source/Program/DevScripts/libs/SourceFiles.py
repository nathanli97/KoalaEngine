import os

from libs import Global


def gather_source_files(root: str, args, dirpath=None, allowed_file_postfix=None):
    if allowed_file_postfix is None:
        allowed_file_postfix = ('.h', '.hpp', '.cc', '.ccx', '.cpp', '.inc', '.c')
    files = []
    if dirpath is None:
        dirpath = ''
    curr_path = os.path.join(root, dirpath)
    for item in os.listdir(curr_path):
        item_abspath = os.path.join(curr_path, item)
        if os.path.isdir(item_abspath):
            files.extend(gather_source_files(root, args, os.path.join(dirpath, item), allowed_file_postfix))
        elif os.path.isfile(item_abspath):
            if item_abspath.endswith(allowed_file_postfix):
                item_relpath = os.path.join(dirpath, item).replace('\\', '/')
                files.append(item_relpath)
                if args.verbose:
                    print(f'\tGathered: {item_relpath}')
    return files


def generate_sourcefiles_cmake(path, files, include_dir=None):
    with open(path, 'wt', encoding='utf-8') as f:
        f.write(
            '# Auto Generated Files -- Dont modify directly! -- Please run GenerateProjectFiles to update!\n')
        f.write(
            '# Generated by GenerateProjectFiles\n')
        f.write('#\n')
        if include_dir is not None:
            f.write(f'set(MODULE_INCLUDE_PATH "${{CMAKE_CURRENT_SOURCE_DIR}}/{include_dir}")\n')
        files_txt = ' '.join(files)
        f.write(f'set(MODULE_SOURCE_FILES {files_txt})\n')
    pass


def gather_source(args):
    print(f'Gathering source files...')
    source_dir = os.path.join(Global.source_dir, 'Source')
    for item in os.listdir(source_dir):
        path = os.path.join(source_dir, item)
        if os.path.isdir(path) and os.path.isfile(os.path.join(path, 'CMakeLists.txt')):
            files = gather_source_files(path, args)
            include_dir = None
            if os.path.isdir(os.path.join(path, 'Include')):
                include_dir = 'Include'
            generate_sourcefiles_cmake(os.path.join(path, 'SourceFiles.gen.cmake'), files, include_dir)

